// <auto-generated />
using System;
using Ems.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ems.Migrations
{
    [DbContext(typeof(EmsDbContext))]
    [Migration("20200130180113_Made_QuotationID_Nullable_QuotationDetails")]
    partial class Made_QuotationID_Nullable_QuotationDetails
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ReturnValue");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("AbpPersistedGrants");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("Ems.Assets.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetClassId");

                    b.Property<string>("AssetLoc8GUID");

                    b.Property<int?>("AssetStatusId");

                    b.Property<string>("ChassisNo");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("EngineNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExternalAsset");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Location");

                    b.Property<decimal?>("PurchaseCost");

                    b.Property<DateTime?>("PurchaseDate");

                    b.Property<string>("PurchaseOrderNo");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.Property<string>("SerialNumber");

                    b.Property<int?>("TenantId");

                    b.Property<string>("VehicleRegistrationNo");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("AssetStatusId");

                    b.HasIndex("TenantId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Ems.Assets.AssetClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetTypeId");

                    b.Property<string>("Class")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Manufacturer")
                        .IsRequired();

                    b.Property<string>("Model");

                    b.Property<string>("Specification");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("AssetClasses");
                });

            modelBuilder.Entity("Ems.Assets.AssetOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CurrencyId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Identifier");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.Property<int?>("SsicCodeId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SsicCodeId");

                    b.HasIndex("TenantId");

                    b.ToTable("AssetOwners");
                });

            modelBuilder.Entity("Ems.Assets.AssetOwnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetId");

                    b.Property<int?>("AssetOwnerId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("FinishDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal?>("PercentageOwnership");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetOwnerId");

                    b.HasIndex("TenantId");

                    b.ToTable("AssetOwnerships");
                });

            modelBuilder.Entity("Ems.Assets.AssetStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AssetStatuses");
                });

            modelBuilder.Entity("Ems.Assets.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Sort");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AssetTypes");
                });

            modelBuilder.Entity("Ems.Assets.LeaseAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetOwnerId");

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CustomerId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Reference");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Terms");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AssetOwnerId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeaseAgreements");
                });

            modelBuilder.Entity("Ems.Assets.LeaseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AllocationPercentage");

                    b.Property<int?>("AssetClassId");

                    b.Property<int?>("AssetId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("DateAllocated");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<decimal?>("DepositUomRefId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Item")
                        .IsRequired();

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("LeaseAgreementId");

                    b.Property<int?>("RentalUomRefId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Terms");

                    b.Property<decimal?>("UnitDepositRate");

                    b.Property<decimal?>("UnitRentalRate");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("AssetId");

                    b.HasIndex("LeaseAgreementId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeaseItems");
                });

            modelBuilder.Entity("Ems.Authorization.CrossTenantPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EntityType")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<int>("TenantRefId");

                    b.Property<string>("TenantType")
                        .IsRequired();

                    b.Property<string>("Tenants");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("CrossTenantPermissions");
                });

            modelBuilder.Entity("Ems.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Ems.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<string>("GoogleAuthenticatorKey");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<Guid?>("ProfilePictureId");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<bool>("ShouldChangePasswordOnNextLogin");

                    b.Property<string>("SignInToken");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Ems.Billing.BillingEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BillingEventDate");

                    b.Property<int>("BillingEventTypeId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("LeaseAgreementId");

                    b.Property<string>("Purpose");

                    b.Property<int?>("TenantId");

                    b.Property<string>("TriggeredBy");

                    b.Property<int?>("VendorChargeId");

                    b.Property<bool>("WasInvoiceGenerated");

                    b.HasKey("Id");

                    b.HasIndex("BillingEventTypeId");

                    b.HasIndex("LeaseAgreementId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VendorChargeId");

                    b.ToTable("BillingEvents");
                });

            modelBuilder.Entity("Ems.Billing.BillingEventDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillingEventId");

                    b.Property<int?>("BillingRuleId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Exception");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("LeaseItemId");

                    b.Property<bool>("RuleExecutedSuccessfully");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("BillingEventId");

                    b.HasIndex("BillingRuleId");

                    b.HasIndex("LeaseItemId");

                    b.HasIndex("TenantId");

                    b.ToTable("BillingEventDetails");
                });

            modelBuilder.Entity("Ems.Billing.BillingEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("BillingEventTypes");
                });

            modelBuilder.Entity("Ems.Billing.BillingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingRuleTypeId");

                    b.Property<decimal?>("ChargePerUnit");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("DefaultInvoiceDescription");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsParent");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("LeaseAgreementId");

                    b.Property<int?>("LeaseItemId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ParentBillingRuleRefId");

                    b.Property<int?>("TenantId");

                    b.Property<int>("UsageMetricId");

                    b.Property<int?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("BillingRuleTypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LeaseAgreementId");

                    b.HasIndex("LeaseItemId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UsageMetricId");

                    b.HasIndex("VendorId");

                    b.ToTable("BillingRules");
                });

            modelBuilder.Entity("Ems.Billing.BillingRuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("BillingRuleTypes");
                });

            modelBuilder.Entity("Ems.Billing.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseCountry")
                        .IsRequired();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Symbol");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Ems.Billing.CustomerInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingEventId");

                    b.Property<int>("BillingRuleId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("CurrencyId");

                    b.Property<int>("CustomerId");

                    b.Property<string>("CustomerReference");

                    b.Property<DateTime?>("DateDue");

                    b.Property<DateTime?>("DateIssued");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("InvoiceRecipient");

                    b.Property<int?>("InvoiceStatusId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Remarks");

                    b.Property<int?>("TenantId");

                    b.Property<decimal>("TotalCharge");

                    b.Property<decimal?>("TotalDiscount");

                    b.Property<decimal>("TotalNet");

                    b.Property<decimal>("TotalPrice");

                    b.Property<decimal?>("TotalTax");

                    b.HasKey("Id");

                    b.HasIndex("BillingEventId");

                    b.HasIndex("BillingRuleId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomerInvoices");
                });

            modelBuilder.Entity("Ems.Billing.CustomerInvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillingRuleRefId");

                    b.Property<decimal?>("Charge");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("CustomerInvoiceId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<decimal?>("Discount");

                    b.Property<decimal?>("Gross");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LeaseItemId");

                    b.Property<decimal>("Net");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal?>("Tax");

                    b.Property<int?>("TenantId");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("CustomerInvoiceId");

                    b.HasIndex("LeaseItemId");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomerInvoiceDetails");
                });

            modelBuilder.Entity("Ems.Billing.CustomerInvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomerInvoiceStatuses");
                });

            modelBuilder.Entity("Ems.Billing.VendorChargeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("VendorChargeStatuses");
                });

            modelBuilder.Entity("Ems.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4096);

                    b.Property<int>("ReadState");

                    b.Property<int>("ReceiverReadState");

                    b.Property<Guid?>("SharedMessageId");

                    b.Property<int>("Side");

                    b.Property<int?>("TargetTenantId");

                    b.Property<long>("TargetUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages");
                });

            modelBuilder.Entity("Ems.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("CustomerLoc8UUID");

                    b.Property<int>("CustomerTypeId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Identifier")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Ems.Customers.CustomerGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomerGroups");
                });

            modelBuilder.Entity("Ems.Customers.CustomerGroupMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CustomerGroupId");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime?>("DateJoined");

                    b.Property<DateTime>("DateLeft");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerGroupId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomerGroupMemberships");
                });

            modelBuilder.Entity("Ems.Customers.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("Ems.Defaults.AppDefault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KeyPair");

                    b.Property<string>("KeyValue");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppDefaults");
                });

            modelBuilder.Entity("Ems.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("FriendProfilePictureId");

                    b.Property<string>("FriendTenancyName");

                    b.Property<int?>("FriendTenantId");

                    b.Property<long>("FriendUserId");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships");
                });

            modelBuilder.Entity("Ems.Logs.ExceptionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("InnerException");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Message");

                    b.Property<string>("StackTrace");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ExceptionLog");
                });

            modelBuilder.Entity("Ems.Metrics.Uom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Uoms");
                });

            modelBuilder.Entity("Ems.MultiTenancy.Accounting.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("TenantAddress");

                    b.Property<string>("TenantLegalName");

                    b.Property<string>("TenantTaxNo");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices");
                });

            modelBuilder.Entity("Ems.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DayCount");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("EditionId");

                    b.Property<string>("ErrorUrl");

                    b.Property<string>("ExternalPaymentId");

                    b.Property<int>("Gateway");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRecurring");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("PaymentPeriodType");

                    b.Property<int>("Status");

                    b.Property<string>("SuccessUrl");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("ExternalPaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments");
                });

            modelBuilder.Entity("Ems.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<Guid?>("CustomCssId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInTrialPeriod");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoFileType")
                        .HasMaxLength(64);

                    b.Property<Guid?>("LogoId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SubscriptionEndDateUtc");

                    b.Property<int>("SubscriptionPaymentType");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("TenantType");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Ems.Organizations.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressEntryName")
                        .IsRequired();

                    b.Property<string>("AddressLine1")
                        .IsRequired();

                    b.Property<string>("AddressLine2");

                    b.Property<string>("AddressLoc8GUID");

                    b.Property<int?>("AssetOwnerId");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CustomerId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDefaultForBilling");

                    b.Property<bool>("IsDefaultForShipping");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHeadOffice");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<int?>("TenantId");

                    b.Property<int?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("AssetOwnerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VendorId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Ems.Organizations.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetOwnerId");

                    b.Property<string>("ContactLoc8GUID");

                    b.Property<string>("ContactName");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CustomerId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Department");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Fax");

                    b.Property<bool>("HeadOfficeContact");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PhoneMobile");

                    b.Property<string>("PhoneOffice");

                    b.Property<string>("Position");

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<int?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("AssetOwnerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Ems.Organizations.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LocationName");

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Ems.Organizations.SsicCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("SSIC")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SsicCodes");
                });

            modelBuilder.Entity("Ems.Quotations.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("Ems.Quotations.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcknowledgedAt");

                    b.Property<string>("AcknowledgedBy");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFinal");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("QuotationLoc8GUID");

                    b.Property<int?>("QuotationStatusId");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.Property<string>("Remark");

                    b.Property<int?>("RequoteRefId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("SupportContractId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<decimal?>("TotalCharge");

                    b.Property<decimal?>("TotalDiscount");

                    b.Property<decimal?>("TotalPrice");

                    b.Property<decimal?>("TotalTax");

                    b.Property<decimal?>("Version");

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("QuotationStatusId");

                    b.HasIndex("SupportContractId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("Ems.Quotations.QuotationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetClassId");

                    b.Property<int?>("AssetId");

                    b.Property<decimal>("Charge");

                    b.Property<decimal?>("Cost");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<decimal>("Discount");

                    b.Property<int?>("EstimateId");

                    b.Property<bool>("IsAdHoc");

                    b.Property<bool>("IsChargeable");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOptionalItem");

                    b.Property<bool>("IsStandbyReplacementUnit");

                    b.Property<int?>("ItemTypeId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Loc8GUID");

                    b.Property<decimal>("MarkUp");

                    b.Property<decimal>("Quantity");

                    b.Property<int?>("QuotationId");

                    b.Property<string>("Remark");

                    b.Property<int?>("SupportItemId");

                    b.Property<int?>("SupportTypeId");

                    b.Property<decimal>("Tax");

                    b.Property<int?>("TenantId");

                    b.Property<decimal>("UnitPrice");

                    b.Property<int?>("UomId");

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("AssetId");

                    b.HasIndex("EstimateId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("SupportItemId");

                    b.HasIndex("SupportTypeId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UomId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("QuotationDetails");
                });

            modelBuilder.Entity("Ems.Quotations.QuotationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("QuotationStatuses");
                });

            modelBuilder.Entity("Ems.Quotations.Rfq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetClassId");

                    b.Property<int?>("AssetOwnerId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CustomerId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int?>("IncidentId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("RequestDate");

                    b.Property<DateTime>("RequiredBy");

                    b.Property<string>("Requirements")
                        .IsRequired();

                    b.Property<int>("RfqTypeId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<long?>("UserId");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("AssetOwnerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("RfqTypeId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("Rfqs");
                });

            modelBuilder.Entity("Ems.Quotations.RfqType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("RfqTypes");
                });

            modelBuilder.Entity("Ems.Storage.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetId");

                    b.Property<string>("BlobFolder");

                    b.Property<string>("BlobId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CustomerInvoiceId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<string>("Filename")
                        .IsRequired();

                    b.Property<int?>("IncidentId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("LeaseAgreementId");

                    b.Property<int?>("QuotationId");

                    b.Property<int?>("SupportContractId");

                    b.Property<int?>("TenantId");

                    b.Property<DateTime>("UploadedAt");

                    b.Property<long?>("UploadedBy");

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CustomerInvoiceId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("LeaseAgreementId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("SupportContractId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Ems.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects");
                });

            modelBuilder.Entity("Ems.Support.ConsumableType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ConsumableTypes");
                });

            modelBuilder.Entity("Ems.Support.Estimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcknowledgedAt");

                    b.Property<int?>("AcknowledgedBy");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("EstimateStatusId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("QuotationId");

                    b.Property<string>("QuotationLoc8GUID");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.Property<string>("Remark");

                    b.Property<int?>("RequoteRefId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<decimal?>("TotalCharge");

                    b.Property<decimal?>("TotalDiscount");

                    b.Property<decimal?>("TotalPrice");

                    b.Property<decimal?>("TotalTax");

                    b.Property<decimal?>("Version");

                    b.HasKey("Id");

                    b.HasIndex("EstimateStatusId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("TenantId");

                    b.ToTable("Estimates");
                });

            modelBuilder.Entity("Ems.Support.EstimateStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("EstimateStatuses");
                });

            modelBuilder.Entity("Ems.Support.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CustomerId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("IncidentDate");

                    b.Property<int?>("IncidentPriorityId");

                    b.Property<int?>("IncidentStatusId");

                    b.Property<int>("IncidentTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("ResolvedAt");

                    b.Property<int?>("SupportItemId");

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IncidentPriorityId");

                    b.HasIndex("IncidentStatusId");

                    b.HasIndex("IncidentTypeId");

                    b.HasIndex("SupportItemId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("Ems.Support.IncidentPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Priority")
                        .IsRequired();

                    b.Property<int>("PriorityLevel");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("IncidentPriorities");
                });

            modelBuilder.Entity("Ems.Support.IncidentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("IncidentStatuses");
                });

            modelBuilder.Entity("Ems.Support.IncidentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("IncidentTypes");
                });

            modelBuilder.Entity("Ems.Support.IncidentUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("IncidentId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Update");

                    b.Property<DateTime>("Updated");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("IncidentUpdates");
                });

            modelBuilder.Entity("Ems.Support.SupportContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AcknowledgedAt");

                    b.Property<string>("AcknowledgedBy");

                    b.Property<int?>("AssetOwnerId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsAcknowledged");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRFQTemplate");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Reference");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("AssetOwnerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VendorId");

                    b.ToTable("SupportContracts");
                });

            modelBuilder.Entity("Ems.Support.SupportItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetClassId");

                    b.Property<int>("AssetId");

                    b.Property<int?>("ConsumableTypeId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<decimal?>("Frequency");

                    b.Property<bool>("IsAdHoc");

                    b.Property<bool>("IsChargeable");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStandbyReplacementUnit");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("SupportContractId");

                    b.Property<int?>("SupportTypeId");

                    b.Property<int?>("TenantId");

                    b.Property<decimal>("UnitPrice");

                    b.Property<int>("UomId");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("AssetId");

                    b.HasIndex("ConsumableTypeId");

                    b.HasIndex("SupportContractId");

                    b.HasIndex("SupportTypeId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UomId");

                    b.ToTable("SupportItems");
                });

            modelBuilder.Entity("Ems.Support.SupportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SupportTypes");
                });

            modelBuilder.Entity("Ems.Support.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetOwnershipId");

                    b.Property<string>("Attachments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CustomerId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate");

                    b.Property<int?>("IncidentId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Loc8GUID");

                    b.Property<string>("Location");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<int?>("SupportItemId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<int>("VendorId");

                    b.Property<int>("WorkOrderPriorityId");

                    b.Property<int>("WorkOrderStatusId");

                    b.Property<int>("WorkOrderTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AssetOwnershipId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("SupportItemId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.HasIndex("WorkOrderPriorityId");

                    b.HasIndex("WorkOrderStatusId");

                    b.HasIndex("WorkOrderTypeId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Ems.Support.WorkOrderPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Priority")
                        .IsRequired();

                    b.Property<int>("PriorityLevel");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("WorkOrderPriorities");
                });

            modelBuilder.Entity("Ems.Support.WorkOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("WorkOrderStatuses");
                });

            modelBuilder.Entity("Ems.Support.WorkOrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("WorkOrderTypes");
                });

            modelBuilder.Entity("Ems.Support.WorkOrderUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Complete");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Update")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<long>("UpdatedByUserId");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderUpdates");
                });

            modelBuilder.Entity("Ems.Telematics.UsageMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("LeaseItemId");

                    b.Property<string>("Metric")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("LeaseItemId");

                    b.HasIndex("TenantId");

                    b.ToTable("UsageMetrics");
                });

            modelBuilder.Entity("Ems.Telematics.UsageMetricRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("EndTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.Property<DateTime?>("StartTime");

                    b.Property<int?>("TenantId");

                    b.Property<decimal?>("UnitsConsumed");

                    b.Property<int?>("UomId");

                    b.Property<int>("UsageMetricId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UomId");

                    b.HasIndex("UsageMetricId");

                    b.ToTable("UsageMetricRecords");
                });

            modelBuilder.Entity("Ems.Vendors.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CurrencyId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Identifier")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.Property<int?>("SsicCodeId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("VendorLoc8GUID");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SsicCodeId");

                    b.HasIndex("TenantId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Ems.Vendors.VendorCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("DateDue");

                    b.Property<DateTime?>("DateIssued");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.Property<int?>("SupportContractId");

                    b.Property<int?>("TenantId");

                    b.Property<decimal?>("TotalPrice");

                    b.Property<decimal?>("TotalTax");

                    b.Property<int?>("VendorChargeStatusId");

                    b.Property<int?>("VendorId");

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("SupportContractId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VendorChargeStatusId");

                    b.HasIndex("VendorId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("VendorCharges");
                });

            modelBuilder.Entity("Ems.Vendors.VendorChargeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("InvoiceDetail")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal>("SubTotal");

                    b.Property<decimal>("Tax");

                    b.Property<int?>("TenantId");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("VendorChargeDetails");
                });

            modelBuilder.Entity("Ems.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice");

                    b.Property<decimal?>("DailyPrice");

                    b.Property<int?>("ExpiringEditionId");

                    b.Property<decimal?>("MonthlyPrice");

                    b.Property<int?>("TrialDayCount");

                    b.Property<int?>("WaitingDayAfterExpire");

                    b.Property<decimal?>("WeeklyPrice");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("Ems.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User")
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Ems.Assets.Asset", b =>
                {
                    b.HasOne("Ems.Assets.AssetClass", "AssetClassFk")
                        .WithMany()
                        .HasForeignKey("AssetClassId");

                    b.HasOne("Ems.Assets.AssetStatus", "AssetStatusFk")
                        .WithMany()
                        .HasForeignKey("AssetStatusId");
                });

            modelBuilder.Entity("Ems.Assets.AssetClass", b =>
                {
                    b.HasOne("Ems.Assets.AssetType", "AssetTypeFk")
                        .WithMany()
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ems.Assets.AssetOwner", b =>
                {
                    b.HasOne("Ems.Billing.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Ems.Organizations.SsicCode", "SsicCodeFk")
                        .WithMany()
                        .HasForeignKey("SsicCodeId");
                });

            modelBuilder.Entity("Ems.Assets.AssetOwnership", b =>
                {
                    b.HasOne("Ems.Assets.Asset", "AssetFk")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Ems.Assets.AssetOwner", "AssetOwnerFk")
                        .WithMany()
                        .HasForeignKey("AssetOwnerId");
                });

            modelBuilder.Entity("Ems.Assets.LeaseAgreement", b =>
                {
                    b.HasOne("Ems.Assets.AssetOwner", "AssetOwnerFk")
                        .WithMany()
                        .HasForeignKey("AssetOwnerId");

                    b.HasOne("Ems.Organizations.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Ems.Customers.Customer", "CustomerFk")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Ems.Assets.LeaseItem", b =>
                {
                    b.HasOne("Ems.Assets.AssetClass", "AssetClassFk")
                        .WithMany()
                        .HasForeignKey("AssetClassId");

                    b.HasOne("Ems.Assets.Asset", "AssetFk")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Ems.Assets.LeaseAgreement", "LeaseAgreementFk")
                        .WithMany()
                        .HasForeignKey("LeaseAgreementId");
                });

            modelBuilder.Entity("Ems.Authorization.Roles.Role", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Ems.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Ems.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Ems.Authorization.Users.User", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Ems.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Ems.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Ems.Billing.BillingEvent", b =>
                {
                    b.HasOne("Ems.Billing.BillingEventType", "BillingEventTypeFk")
                        .WithMany()
                        .HasForeignKey("BillingEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Assets.LeaseAgreement", "LeaseAgreementFk")
                        .WithMany()
                        .HasForeignKey("LeaseAgreementId");

                    b.HasOne("Ems.Vendors.VendorCharge", "VendorChargeFk")
                        .WithMany()
                        .HasForeignKey("VendorChargeId");
                });

            modelBuilder.Entity("Ems.Billing.BillingEventDetail", b =>
                {
                    b.HasOne("Ems.Billing.BillingEvent", "BillingEventFk")
                        .WithMany()
                        .HasForeignKey("BillingEventId");

                    b.HasOne("Ems.Billing.BillingRule", "BillingRuleFk")
                        .WithMany()
                        .HasForeignKey("BillingRuleId");

                    b.HasOne("Ems.Assets.LeaseItem", "LeaseItemFk")
                        .WithMany()
                        .HasForeignKey("LeaseItemId");
                });

            modelBuilder.Entity("Ems.Billing.BillingRule", b =>
                {
                    b.HasOne("Ems.Billing.BillingRuleType", "BillingRuleTypeFk")
                        .WithMany()
                        .HasForeignKey("BillingRuleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Billing.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Ems.Assets.LeaseAgreement", "LeaseAgreementFk")
                        .WithMany()
                        .HasForeignKey("LeaseAgreementId");

                    b.HasOne("Ems.Assets.LeaseItem", "LeaseItemFk")
                        .WithMany()
                        .HasForeignKey("LeaseItemId");

                    b.HasOne("Ems.Telematics.UsageMetric", "UsageMetricFk")
                        .WithMany()
                        .HasForeignKey("UsageMetricId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Vendors.Vendor", "VendorFk")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("Ems.Billing.CustomerInvoice", b =>
                {
                    b.HasOne("Ems.Billing.BillingEvent", "BillingEventFk")
                        .WithMany()
                        .HasForeignKey("BillingEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Billing.BillingRule", "BillingRuleFk")
                        .WithMany()
                        .HasForeignKey("BillingRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Billing.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Customers.Customer", "CustomerFk")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Billing.CustomerInvoiceStatus", "InvoiceStatusFk")
                        .WithMany()
                        .HasForeignKey("InvoiceStatusId");
                });

            modelBuilder.Entity("Ems.Billing.CustomerInvoiceDetail", b =>
                {
                    b.HasOne("Ems.Billing.CustomerInvoice", "CustomerInvoiceFk")
                        .WithMany()
                        .HasForeignKey("CustomerInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Assets.LeaseItem", "LeaseItemFk")
                        .WithMany()
                        .HasForeignKey("LeaseItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ems.Customers.Customer", b =>
                {
                    b.HasOne("Ems.Billing.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Ems.Customers.CustomerType", "CustomerTypeFk")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ems.Customers.CustomerGroupMembership", b =>
                {
                    b.HasOne("Ems.Customers.CustomerGroup", "CustomerGroupFk")
                        .WithMany()
                        .HasForeignKey("CustomerGroupId");

                    b.HasOne("Ems.Customers.Customer", "CustomerFk")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Ems.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ems.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Ems.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("Ems.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Ems.Organizations.Address", b =>
                {
                    b.HasOne("Ems.Assets.AssetOwner", "AssetOwnerFk")
                        .WithMany()
                        .HasForeignKey("AssetOwnerId");

                    b.HasOne("Ems.Customers.Customer", "CustomerFk")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Ems.Vendors.Vendor", "VendorFk")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("Ems.Organizations.Contact", b =>
                {
                    b.HasOne("Ems.Assets.AssetOwner", "AssetOwnerFk")
                        .WithMany()
                        .HasForeignKey("AssetOwnerId");

                    b.HasOne("Ems.Customers.Customer", "CustomerFk")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Ems.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Ems.Vendors.Vendor", "VendorFk")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("Ems.Organizations.Location", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Ems.Quotations.Quotation", b =>
                {
                    b.HasOne("Ems.Quotations.QuotationStatus", "QuotationStatusFk")
                        .WithMany()
                        .HasForeignKey("QuotationStatusId");

                    b.HasOne("Ems.Support.SupportContract", "SupportContractFk")
                        .WithMany()
                        .HasForeignKey("SupportContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Support.WorkOrder", "WorkOrderFk")
                        .WithMany()
                        .HasForeignKey("WorkOrderId");
                });

            modelBuilder.Entity("Ems.Quotations.QuotationDetail", b =>
                {
                    b.HasOne("Ems.Assets.AssetClass", "AssetClassFk")
                        .WithMany()
                        .HasForeignKey("AssetClassId");

                    b.HasOne("Ems.Assets.Asset", "AssetFk")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Ems.Support.Estimate", "EstimateFk")
                        .WithMany()
                        .HasForeignKey("EstimateId");

                    b.HasOne("Ems.Quotations.ItemType", "ItemTypeFk")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("Ems.Quotations.Quotation", "QuotationFk")
                        .WithMany()
                        .HasForeignKey("QuotationId");

                    b.HasOne("Ems.Support.SupportItem", "SupportItemFk")
                        .WithMany()
                        .HasForeignKey("SupportItemId");

                    b.HasOne("Ems.Support.SupportType", "SupportTypeFk")
                        .WithMany()
                        .HasForeignKey("SupportTypeId");

                    b.HasOne("Ems.Metrics.Uom", "UomFk")
                        .WithMany()
                        .HasForeignKey("UomId");

                    b.HasOne("Ems.Support.WorkOrder", "WorkOrderFk")
                        .WithMany()
                        .HasForeignKey("WorkOrderId");
                });

            modelBuilder.Entity("Ems.Quotations.Rfq", b =>
                {
                    b.HasOne("Ems.Assets.AssetClass", "AssetClassFk")
                        .WithMany()
                        .HasForeignKey("AssetClassId");

                    b.HasOne("Ems.Assets.AssetOwner", "AssetOwnerFk")
                        .WithMany()
                        .HasForeignKey("AssetOwnerId");

                    b.HasOne("Ems.Customers.Customer", "CustomerFk")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Ems.Support.Incident", "IncidentFk")
                        .WithMany()
                        .HasForeignKey("IncidentId");

                    b.HasOne("Ems.Quotations.RfqType", "RfqTypeFk")
                        .WithMany()
                        .HasForeignKey("RfqTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Ems.Vendors.Vendor", "VendorFk")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ems.Storage.Attachment", b =>
                {
                    b.HasOne("Ems.Assets.Asset", "AssetFk")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Ems.Billing.CustomerInvoice", "CustomerInvoiceFk")
                        .WithMany()
                        .HasForeignKey("CustomerInvoiceId");

                    b.HasOne("Ems.Support.Incident", "IncidentFk")
                        .WithMany()
                        .HasForeignKey("IncidentId");

                    b.HasOne("Ems.Assets.LeaseAgreement", "LeaseAgreementFk")
                        .WithMany()
                        .HasForeignKey("LeaseAgreementId");

                    b.HasOne("Ems.Quotations.Quotation", "QuotationFk")
                        .WithMany()
                        .HasForeignKey("QuotationId");

                    b.HasOne("Ems.Support.SupportContract", "SupportContractFk")
                        .WithMany()
                        .HasForeignKey("SupportContractId");

                    b.HasOne("Ems.Support.WorkOrder", "WorkOrderFk")
                        .WithMany()
                        .HasForeignKey("WorkOrderId");
                });

            modelBuilder.Entity("Ems.Support.Estimate", b =>
                {
                    b.HasOne("Ems.Support.EstimateStatus", "EstimateStatusFk")
                        .WithMany()
                        .HasForeignKey("EstimateStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Quotations.Quotation", "QuotationFk")
                        .WithMany()
                        .HasForeignKey("QuotationId");
                });

            modelBuilder.Entity("Ems.Support.Incident", b =>
                {
                    b.HasOne("Ems.Assets.Asset", "AssetFk")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Ems.Customers.Customer", "CustomerFk")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Ems.Support.IncidentPriority", "IncidentPriorityFk")
                        .WithMany()
                        .HasForeignKey("IncidentPriorityId");

                    b.HasOne("Ems.Support.IncidentStatus", "IncidentStatusFk")
                        .WithMany()
                        .HasForeignKey("IncidentStatusId");

                    b.HasOne("Ems.Support.IncidentType", "IncidentTypeFk")
                        .WithMany()
                        .HasForeignKey("IncidentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Support.SupportItem", "SupportItemFk")
                        .WithMany()
                        .HasForeignKey("SupportItemId");

                    b.HasOne("Ems.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Ems.Support.IncidentUpdate", b =>
                {
                    b.HasOne("Ems.Support.Incident", "IncidentFk")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ems.Support.SupportContract", b =>
                {
                    b.HasOne("Ems.Assets.AssetOwner", "AssetOwnerFk")
                        .WithMany()
                        .HasForeignKey("AssetOwnerId");

                    b.HasOne("Ems.Vendors.Vendor", "VendorFk")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("Ems.Support.SupportItem", b =>
                {
                    b.HasOne("Ems.Assets.AssetClass", "AssetClassFk")
                        .WithMany()
                        .HasForeignKey("AssetClassId");

                    b.HasOne("Ems.Assets.Asset", "AssetFk")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Support.ConsumableType", "ConsumableTypeFk")
                        .WithMany()
                        .HasForeignKey("ConsumableTypeId");

                    b.HasOne("Ems.Support.SupportContract", "SupportContractFk")
                        .WithMany()
                        .HasForeignKey("SupportContractId");

                    b.HasOne("Ems.Support.SupportType", "SupportTypeFk")
                        .WithMany()
                        .HasForeignKey("SupportTypeId");

                    b.HasOne("Ems.Metrics.Uom", "UomFk")
                        .WithMany()
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ems.Support.WorkOrder", b =>
                {
                    b.HasOne("Ems.Assets.AssetOwnership", "AssetOwnershipFk")
                        .WithMany()
                        .HasForeignKey("AssetOwnershipId");

                    b.HasOne("Ems.Customers.Customer", "CustomerFk")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Ems.Support.Incident", "IncidentFk")
                        .WithMany()
                        .HasForeignKey("IncidentId");

                    b.HasOne("Ems.Support.SupportItem", "SupportItemFk")
                        .WithMany()
                        .HasForeignKey("SupportItemId");

                    b.HasOne("Ems.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Vendors.Vendor", "VendorFk")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Support.WorkOrderPriority", "WorkOrderPriorityFk")
                        .WithMany()
                        .HasForeignKey("WorkOrderPriorityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Support.WorkOrderStatus", "WorkOrderStatusFk")
                        .WithMany()
                        .HasForeignKey("WorkOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ems.Support.WorkOrderType", "WorkOrderTypeFk")
                        .WithMany()
                        .HasForeignKey("WorkOrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ems.Support.WorkOrderUpdate", b =>
                {
                    b.HasOne("Ems.Support.WorkOrder", "WorkOrderFk")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ems.Telematics.UsageMetric", b =>
                {
                    b.HasOne("Ems.Assets.LeaseItem", "LeaseItemFk")
                        .WithMany()
                        .HasForeignKey("LeaseItemId");
                });

            modelBuilder.Entity("Ems.Telematics.UsageMetricRecord", b =>
                {
                    b.HasOne("Ems.Metrics.Uom", "UomFk")
                        .WithMany()
                        .HasForeignKey("UomId");

                    b.HasOne("Ems.Telematics.UsageMetric", "UsageMetricFk")
                        .WithMany()
                        .HasForeignKey("UsageMetricId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ems.Vendors.Vendor", b =>
                {
                    b.HasOne("Ems.Billing.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Ems.Organizations.SsicCode", "SsicCodeFk")
                        .WithMany()
                        .HasForeignKey("SsicCodeId");
                });

            modelBuilder.Entity("Ems.Vendors.VendorCharge", b =>
                {
                    b.HasOne("Ems.Support.SupportContract", "SupportContractFk")
                        .WithMany()
                        .HasForeignKey("SupportContractId");

                    b.HasOne("Ems.Billing.VendorChargeStatus", "VendorChargeStatusFk")
                        .WithMany()
                        .HasForeignKey("VendorChargeStatusId");

                    b.HasOne("Ems.Vendors.Vendor", "VendorFk")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.HasOne("Ems.Support.WorkOrder", "WorkOrderFk")
                        .WithMany()
                        .HasForeignKey("WorkOrderId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("Ems.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("Ems.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
